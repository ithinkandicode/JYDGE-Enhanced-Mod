<?xml version="1.0" encoding="UTF-8"?>

<root>
	<array id="info">
		<node id="version" value="2" />
		<node id="revision" value="2" />
	</array>

	<array id="user">
		<node id="priority" value="20" />
	</array>

	<array id="vertex_input">
		<node id="position" semantic="POSITION" />
		<node id="color" semantic="COLOR" />
		<node id="texture_coordinate" semantic="TEXTURE_COORDINATE_0" />
		<node id="normal" semantic="NORMAL" />
	</array>

	<array id="vertex_constants">
		<node id="view_proj" type="FLOAT4X4" semantic="VIEW_PROJECTION_TRANSFORM" />
		<node id="world" type="FLOAT4X4" semantic="WORLD_TRANSFORM" />
		<node id="material_color" type="FLOAT4" />
	</array>

	<array id="vertex_output">
    	<node id="position" type="FLOAT4" semantic="POSITION" />
    	<node id="color" type="FLOAT4" semantic="COLOR" />
    	<node id="texture_coordinate" type="FLOAT2" semantic="TEXTURE_COORDINATE" />
    	<node id="normal" type="FLOAT3" />
    	<node id="world_position" type="FLOAT3" />
	</array>

	<array id="pixel_constants">
        <!-- light -->
		<node id="ambient_light" type="FLOAT4" />
		<node id="light_color" type="FLOAT4" count="4" />
		<node id="light_position_radius" type="FLOAT4" count="4" />
        <!-- glow -->
		<node id="glow_color" type="FLOAT4" />
	</array>

	<array id="pixel_textures">
		<node id="diffuse_map" type="2D" />
		<node id="glow_map" type="2D" />
	</array>

	<array id="pixel_output">
		<node id="color" />
	</array>

	<array id="sources">
		<node type="vertex">
			<![CDATA[
				void main()
				{
					float4 position = input.position * world;
					output.position = position * view_proj;
					output.texture_coordinate = input.texture_coordinate;
					output.normal = normalize(float4(input.normal.xyz, 0.0f) * world).xyz;
					output.world_position = position.xyz;
                    output.color = input.color * material_color;
				}
			]]>
		</node>
		<node type="pixel">
			<![CDATA[
				void main()
				{
					float4 diffuse_sample = sampleTexture(texture.diffuse_map, input.texture_coordinate);
					if (diffuse_sample.a < 0.4f)
						discard;

					float4 total_light_color = ambient_light;

					for (int i = 0; i < 4; ++i)
					{
						float distance_to_light = distance(input.world_position, light_position_radius[i].xyz);
						float attenuation_intensity = saturate(distance_to_light / light_position_radius[i].w);

						float attenuation = 1.0f - attenuation_intensity * attenuation_intensity;
						float3 light_direction = normalize(light_position_radius[i].xyz - input.world_position);

						float diffuse_component = saturate(dot(light_direction, input.normal));
						total_light_color += light_color[i] * attenuation * diffuse_component;
					}

					float4 diffuse_color = input.color * float4(saturate(total_light_color.xyz * diffuse_sample.xyz), diffuse_sample.w);
					float4 glow_sample = sampleTexture(texture.glow_map, input.texture_coordinate);

					float4 glow_component =	glow_color.w * glow_sample.w * glow_color * float4(glow_sample.xyz, 0.0f);

					output.color = diffuse_color + glow_component;
				}
			]]>
		</node>
	</array>
</root>
