(This is autogenerated Shadegrown Squirrel scripting API help file.)

Constant                              Desc                                                                                      
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------
NX_BLEND_NORMAL                       Normal blend mode.                                                                        
NX_BLEND_ADDITIVE                     Additive blend mode.                                                                      
NX_BLEND_SUBTRACTIVE                  Subtractive blend mode. Source color is removed from destination color.                   
NX_BLEND_MULTIPLY                     Multiply aka. modulate blend mode. Multiplies source pixel value with destination. Ignores alpha.
NX_BLEND_MULTIPLY_2X                  Multiply 2X aka. modulate 2x blend mode. Multiplies source pixel value with destination twice for brighter result. Ignores alpha.
NX_BLEND_MULTIPLY_ADD                 Multiply add blend mode. Adds source * destination pixel value to destination value. Ignores alpha.
NX_BLEND_REPLACE                      Replace blend mode. Skips all blending. Potentially faster than other blend modes.        
NX_ALIGN_LEFT                         Align left.                                                                               
NX_ALIGN_TOP                          Align top.                                                                                
NX_ALIGN_RIGHT                        Align right.                                                                              
NX_ALIGN_BOTTOM                       Align bottom                                                                              
NX_ALIGN_VCENTER                      Align vertical center                                                                     
NX_ALIGN_HCENTER                      Align horizontal center.                                                                  
NX_ALIGN_CENTER                       Align center vertically and horizontally.                                                 
STAGE_OBJECT_TYPE_UNKNOWN             Stage object type Unknown. No object is set to this value.                                
STAGE_OBJECT_TYPE_LIGHT               Stage object type for Lights.                                                             
STAGE_OBJECT_TYPE_MARKER              Stage object type for Markers.                                                            
STAGE_OBJECT_TYPE_ACTOR               Stage object type for Actors.                                                             
STAGE_OBJECT_TYPE_SOUND_SOURCE        Stage object type for Sound Sources.                                                      
STAGE_OBJECT_TYPE_GROUND_DECAL        Stage object type for Ground Decals.                                                      
STAGE_OBJECT_TYPE_PARTICLE_EMITTER    Stage object type for Particle Emitters.                                                  
STAGE_OBJECT_TYPE_SCRIPTABLE_SURFACE  Stage object type for Scriptable Surfaces.                                                
LIGHT_TYPE_POINT                      Light type for point lights.                                                              
LIGHT_TYPE_DIRECTIONAL                Light type for directional lights.                                                        
LIGHT_TYPE_SPOT                       Light type for spot lights.                                                               


Function List
---------------------------------------------------------------------------------------------------------------------------------------------
void                  Include (string filename)
boolean               NX_IsDeveloperModeEnabled ()
void                  NX_Print (string text)
void                  NX_Popup (string text)
integer               NX_GetTime ()
integer               NX_GetTimeSecondsElapsedSinceEpoch ()
bitmap_handle         NX_GetBitmap (string name)
bitmap_handle         NX_LoadBitmap (string name)
void                  NX_ReleaseBitmap (bitmap_handle bm)
string                NX_GetBitmapName (bitmap_handle bm)
integer               NX_GetBitmapWidth (bitmap_handle bm)
integer               NX_GetBitmapHeight (bitmap_handle bm)
void                  NX_DrawBitmap (bitmap_handle bm,float x,float y)
void                  NX_DrawBitmapRS (bitmap_handle bm,float x,float y,float angle,float scale)
void                  NX_DrawBitmapStretched (bitmap_handle bm,float x,float y,float w,float h,float a)
void                  NX_DrawRect (float x,float y,float width,float height)
void                  NX_SetBlend (nx_blend_*)
void                  NX_SetColor (float r,float g,float b)
void                  NX_SetAlpha (float alpha)
void                  NX_SetDepthDefault (float z)
font_handle           NX_LoadFont (string)
void                  NX_ReleaseFont (font_handle/string)
void                  NX_SetTextTransform (float x_scale,float y_scale,float angle)
void                  NX_SetTextAlign (nx_align_*)
float                 NX_GetTextWidth (font_handle,text)
float                 NX_GetTextHeight (font_handle,text)
float                 NX_GetTextWidthAndHeight (font_handle,text)
void                  NX_DrawText (font_handle,float x,float y,string text)
void                  NX_DrawLine (float x0,float y0,float x1,float y1)
sound_handle          NX_LoadSound (string)
void                  NX_ReleaseSound (sound_handle handle)
sound_channel         NX_PlaySound (sound_handle/string,float volume,float pan,float freq_mul)
void                  NX_SwitchMusic (sound_handle/string,float fade_old_out_duration,float fade_new_in_duration)
void                  NX_StopMusic (float fade_out_duration)
string                DM_GetArrayNodeValue (string database,string/integer array,string/integer node,string/integer value_id)
integer               DM_GetNumberOfArrays (string database)
integer               DM_GetArrayNumberOfNodes (string database,string/integer array)
integer               DM_GetArrayNodeNumberOfValues (string database,string/integer array,string/integer node)
string                Profile_GetValue (string array_id,string node_id/integer node_index,string value_name)
void                  Profile_SetValue (string array_id,string node_id,string value_name,string value)
void                  UI_SendScreenMessage (string target_screen,string key,string value)
void                  UI_PushScreen (string screen)
void                  UI_SwitchScreen (string screens_comma_separated)
void                  Stage_Create (integer x,integer y)
void                  Stage_SetName (string)
string                Stage_GetFilename ()
void                  Stage_GetCellSize ()
void                  Stage_GetWidth ()
void                  Stage_GetHeight ()
void                  Stage_GetGroundTileHandle (string bm_name)
integer               Stage_GetTime ()
void                  Stage_SetGroundTile (int cell_x,int cell_y,bitmap_handle bm,float angle_degrees,float scale)
void                  Stage_RemoveGroundTile (int cell_x,int cell_y)
void                  Stage_SetGroundTileColor (int cell_x,int cell_y,bitmap_handle bm,float r,float g,float b)
bitmap_handle         Stage_GetGroundTileBitmap (int cell_x,int cell_y)
void                  Stage_SetWallTileFromTileset (int cell_x,int cell_y,string tileset_id)
so_handle             Stage_AddWallTileFromActorType (int cell_x,int cell_y,string actor_type)
so_handle             Stage_GetWallTileActorInTileset (int cell_x,int cell_y,string tileset_id)
so_handle             Stage_GetFirstWallTileActor (int cell_x,int cell_y)
so_handle             Stage_GetFirstWallTileActorButNoCables (int cell_x,int cell_y)
so_handle             Stage_GetFirstStageObjectWithId (string id)
void                  Stage_PasteExternalStageToStage (string stage_file_name,float x,float y,float angle_degrees)
void                  Stage_PasteExternalStageToStageRotateAroundUpperLeftCorner (string stage_file_name,float x,float y,float angle_degrees)
void                  Stage_SetStageScript (string script)
void                  Stage_SetMusicTrack (string sound_file)
so_handle             Stage_CreateActor (string actor_type,float x,float y,float z)
so_handle             Stage_CreateScriptableSurface (string script,float x,float y,float z)
so_handle             Stage_CreateMarker (string id,float x,float y,float z)
so_handle             Stage_CreateSoundSource (string sound_file,float x,float y,float z)
so_handle             Stage_CreateLight (LIGHT_TYPE_* type,float x,float y,float z)
so_handle             Stage_CreateDecalOnGround (string decal_bitmap_filename,float x,float y,float angle_in_degrees,float scale)
so_handle             Stage_CreateTextDecalOnGround (string font_name, string text, float x,float y,float angle_in_degrees,float scale)
so_handle             Stage_CreateParticleEmitter (string effect_filename,float x,float y,float z,float emit_interval_seconds)
void                  Stage_DeleteStageObject (so_handle handle)
array[so_handle,...]  Stage_QueryStageObjectsInsideRectangle (float center_x,float center_y,float width,float height)
array[so_handle,...]  Stage_QueryStageObjectsInRadius (float center_x,float center_y,float radius)
boolean               Stage_IsStageEditorOpen ()
void                  Stage_SetAmbientLight (float r,float g,float b)
void                  Stage_GetKeyValue (string key)
void                  Stage_SetKeyValue (string key,<float/integer/boolean/string> value)
void                  Stage_SendStageObjectCommand (so_handle,string command,string parm)
void                  Stage_SendActorCommand (so_handle,string command,float parm)
void                  Stage_SpawnEffect (string effect,float x,float y,float z,float angle)
boolean               Stage_IsLineOfSightClear (float from_x,float from_y,float from_z,float to_x,float to_y,float to_z)
boolean               Stage_IsLineWalkable (float from_x,float from_y,float to_x,float to_y,float walker_radius)
array[x,y,z]          Stage_RayCast (float from_x,float from_y,float from_z,float to_x,float to_y,float to_z)
void                  Light_SetRadius (so_handle light_handle,float radius)
void                  Light_SetColor (so_handle light_handle,float r,float g,float b)
void                  Light_SetShadows (so_handle light_handle,boolean shadows)
void                  Light_SetHilight (so_handle light_handle,boolean hilight)
STAGE_OBJECT_TYPE_*   StageObject_GetType (so_handle handle)
void                  StageObject_SetId (so_handle handle,string new_id)
void                  StageObject_SetParent (so_handle handle,so_handle new_parent_handle)
so_handle             StageObject_GetParent (so_handle handle)
integer               StageObject_GetNumberOfChildren (so_handle handle)
so_handle             StageObject_GetChildByIndex (so_handle so_handle, integer index)
void                  StageObject_SetScale (so_handle handle,float scale)
void                  StageObject_GetScale (so_handle handle)
void                  StageObject_SetAngle (so_handle handle,float angle_degrees)
void                  StageObject_SetAngles (so_handle handle,float angle_x,float angle_y,float angle_z)
float                 StageObject_GetAngle (so_handle handle)
array[x,y,z]          StageObject_GetPosition (so_handle)
void                  StageObject_SetPosition (so_handle handle,float x,float y,float z)
void                  StageObject_SetPositionByStackingOnTop (so_handle handle,float x,float y)
array[x,y,z]          StageObject_GetStagePosition (so_handle)
so_handle             StageObject_GetById (string id)
void                  StageObject_GetKeyValue (so_handle handle,string key)
void                  StageObject_SetKeyValue (so_handle handle,string key,<float/integer/boolean/string> value)
void                  StageObject_SetKeyValueFloat (so_handle handle,string key,float value)
void                  StageObject_SetKeyValueInteger (so_handle handle,string key,integer value)
void                  StageObject_SetKeyValueBoolean (so_handle handle,string key,boolean value)
void                  StageObject_SetKeyValueString (so_handle handle,string key,string value)
void                  StageObject_SetKeyValueStageObjectReference (so_handle handle,string key,so_handle value)
void                  StageObject_SetKeyValueBitmap (so_handle handle,string key,string bitmap_name)
boolean               StageObject_IsLineOfSightClear (so_handle handle,float x,float y,float z)
void                  ScriptableSurface_SetKeyValue (string key,string value)
void                  Marker_SetRadius (so_handle handle,float radius)
void                  SoundSource_SetSound (so_handle handle,string sound_file)
void                  SoundSource_SetRadius (so_handle handle,float radius)
void                  SoundSource_SetLooping (so_handle handle,boolean looping)
void                  SoundSource_SetToAmbient (so_handle handle)
void                  SoundSource_SetToPositional (so_handle handle)
void                  SoundSource_SetTriggerOnEnterRadius (so_handle handle,boolean trigger_on_enter)
void                  SoundSource_SetTriggerOnLeaveRadius (so_handle handle,boolean trigger_on_leave)
string                Actor_GetActorType (so_handle actor)
void                  Actor_SetTargetAngle (so_handle actor,float angle_degrees)
float                 Actor_GetTargetAngle (so_handle actor)
void                  Actor_KillActorAndStartDeathAnimation (so_handle actor)
void                  Actor_KillActorAndSetDeadInstantly (so_handle actor)
void                  Actor_GetHitPoints (so_handle actor)
void                  Actor_GetHitPointsMaximum (so_handle actor)
void                  Decal_SetColor (so_handle decal,float r,float g,float b, float a)
integer               ActorType_GetNumberOfActorTypes ()
string                ActorType_GetActorTypeIdByIndex (integer index)
float                 ActorType_GetBoundingCircleRadius (string actor_type)
array[x,y,z]          ActorType_GetBoundingBoxDimensions (string actor_type)
array[x,y,z]          ActorType_GetBoundingBoxCenterOffset (string actor_type)
boolean               ActorType_BelongsToTilesetCategory (string actor_type, string tileset_category)
void                  Misc_LoadAndPlayStage (string stage_filename)
void                  Misc_QuickStageRestart ()
void                  Engine_SetKeyValueBoolean (string key,boolean value)
void                  Game_NC_Actor_DealDamage (so_handle handle,float damage)
void                  Game_NC_Actor_SendHack (so_handle handle,float number)
void                  Game_NC_LocalizeMapped (string id)
float value           Game_NC_GetDPSForWeaponWithName (string value)
void                  Game_NC_SetFogColor (float r,float g,float b)
bool value            Game_NC_IsAnyPlayerInRadius (float x, float y, float radius, string id)
void                  Game_NC_ShowNotification (string message, float time)
void                  Game_NC_InstallEnhancement (so_handle actor, string enhancement_id)
void                  Game_NC_UninstallEnhancement (so_handle actor, string enhancement_id)
void                  Game_NC_UpdateProgessBar (float width, float value, string title, string subtitle)
bool value            Game_NC_DoesFeatureExist (string feature)
int value             Game_NC_GetGameSettingInt (string setting, int default_value)
bool value            Game_NC_IsFullVersionUnlocked ()



Function Details

// Includes given Squirrel file by running it in virtual machine.
void Include(string filename);

// Returns true if developer mode is enabled.
boolean NX_IsDeveloperModeEnabled();

// Prints given text line to console.
void NX_Print(string text);

// Shows info popup with given text. Requires developer mode.
void NX_Popup(string text);

// Returns time since program start in milliseconds.
integer NX_GetTime();

// Returns time elapsed since epoch (Jan 1st, 1970).
integer NX_GetTimeSecondsElapsedSinceEpoch();

// Returns bitmap handle for given image resource. Loads bitmap if not already loaded.
bitmap_handle NX_GetBitmap(string name);

// Returns bitmap handle for given image resource. Increases reference count by one.
bitmap_handle NX_LoadBitmap(string name);

// Decreases reference count and releases bitmap from memory if reference count is zero.
void NX_ReleaseBitmap(bitmap_handle bm);

// Returns name of the given bitmap.
string NX_GetBitmapName(bitmap_handle bm);

// Returns width of the given bitmap.
integer NX_GetBitmapWidth(bitmap_handle bm);

// Returns height of the given bitmap.
integer NX_GetBitmapHeight(bitmap_handle bm);

// Draws given bitmap with upper left corner of the bitmap in x,y coordinate.
void NX_DrawBitmap(bitmap_handle bm,float x,float y);

// Draws given bitmap centered to x,y coordinate, rotated by angle (in radians), and scaled by given scale.
void NX_DrawBitmapRS(bitmap_handle bm,float x,float y,float angle,float scale);

// Draws given bitmap with alpha, stretched to given width and height with upper left corner of the bitmap in x,y coordinate.
void NX_DrawBitmapStretched(bitmap_handle bm,float x,float y,float w,float h,float a);

// Draws filled rectangle at given x,y coordinate.
void NX_DrawRect(float x,float y,float width,float height);

// Sets active blend mode for drawing bitmaps and fonts.
void NX_SetBlend(nx_blend_*);

// Sets active color for drawing bitmaps and fonts.
void NX_SetColor(float r,float g,float b);

// Sets active alpha value for drawing bitmaps and fonts.
void NX_SetAlpha(float alpha);

// Sets active z coordinate for drawing bitmaps and fonts.
void NX_SetDepthDefault(float z);

// Returns font handle for given font resource. Increases reference count by one and loads the font if not already loaded.
font_handle NX_LoadFont(string);

// Decreases reference count and releases font from memory if reference count is zero.
void NX_ReleaseFont(font_handle/string);

// Sets active font rendering transform defined by x and y scale factor and rotation angle in radians.
void NX_SetTextTransform(float x_scale,float y_scale,float angle);

// Sets active text rendering alignment.
void NX_SetTextAlign(nx_align_*);

// Returns text width rendered with given font and active text align.
float NX_GetTextWidth(font_handle,text);

// Returns text width rendered with given font and active text align.
float NX_GetTextHeight(font_handle,text);

// Returns a two item array with text width and height rendered with given font and active text align.
float NX_GetTextWidthAndHeight(font_handle,text);

// Draws given text string using given font.
void NX_DrawText(font_handle,float x,float y,string text);

// Draws line from (x0,y0) to (x1,y1).
void NX_DrawLine(float x0,float y0,float x1,float y1);

// Returns sound handle for given sound resource. Increases reference count by one.
sound_handle NX_LoadSound(string);

// Decreases reference count and releases sound from memory if reference count is zero.
void NX_ReleaseSound(sound_handle handle);

// Plays given sound with given volume, panning, and frequency multiplication. Returns sound channel handle.
sound_channel NX_PlaySound(sound_handle/string,float volume,float pan,float freq_mul);

// Switches music track to with given fade old out and fade new in durations.
void NX_SwitchMusic(sound_handle/string,float fade_old_out_duration,float fade_new_in_duration);

// Stops music track to with given fade out.
void NX_StopMusic(float fade_out_duration);

// Returns node value in given array in given database. The value is always string or null.
string DM_GetArrayNodeValue(string database,string/integer array,string/integer node,string/integer value_id);

// Returns number of arrays in given database.
integer DM_GetNumberOfArrays(string database);

// Returns number of nodes in given array or null if array doesn't exist.
integer DM_GetArrayNumberOfNodes(string database,string/integer array);

// Returns number of values in given database array or null if node doesn't exist.
integer DM_GetArrayNodeNumberOfValues(string database,string/integer array,string/integer node);

// Returns value of the key in given node in given array or null if it doesn't exist.
string Profile_GetValue(string array_id,string node_id/integer node_index,string value_name);

// Sets the value of the key in given node in given array. If array, node, or key doesn't exists, it is created.
void Profile_SetValue(string array_id,string node_id,string value_name,string value);

// Sends message to given UI screen.
void UI_SendScreenMessage(string target_screen,string key,string value);

// Pushes screen on top of screen stack.
void UI_PushScreen(string screen);

// Switches screen stack to given list of screens separated by commas.
void UI_SwitchScreen(string screens_comma_separated);

// Initializes stage to given width and height (measured in cells).
void Stage_Create(integer x,integer y);

// Sets the name of the stage.
void Stage_SetName(string);

// Returns the file name of the stage if defined. Note that this only works for stages loaded from .xml files.
string Stage_GetFilename();

// Returns size of one cell.
void Stage_GetCellSize();

// Returns the width of the stage.
void Stage_GetWidth();

// Returns the height of the stage.
void Stage_GetHeight();

// Returns the handle of given tile name.
void Stage_GetGroundTileHandle(string bm_name);

// Returns current stage time in milliseconds.
integer Stage_GetTime();

// Sets ground tile at given cell coordinate to given rotated (in degrees) and scaled bitmap.
void Stage_SetGroundTile(int cell_x,int cell_y,bitmap_handle bm,float angle_degrees,float scale);

// Removes ground tile at given cell coordinate.
void Stage_RemoveGroundTile(int cell_x,int cell_y);

// Sets ground tile at given cell coordinate to given r g b color.
void Stage_SetGroundTileColor(int cell_x,int cell_y,bitmap_handle bm,float r,float g,float b);

// Returns ground tile bitmap at given cell coordinate.
bitmap_handle Stage_GetGroundTileBitmap(int cell_x,int cell_y);

// Sets the wall tile at given cell to given tileset and adjusts the neighbor tiles accordingly.
void Stage_SetWallTileFromTileset(int cell_x,int cell_y,string tileset_id);

// Adds the wall tile at given cell to given actor type. Note: this doesn't remove the old wall in the position.
so_handle Stage_AddWallTileFromActorType(int cell_x,int cell_y,string actor_type);

// Returns the actor belonging to given tileset in given cell. Returns 0 if no actor is found.
so_handle Stage_GetWallTileActorInTileset(int cell_x,int cell_y,string tileset_id);

// Returns the first wall tile actor in given cell. Returns 0 if no actor is found. Note that the cell may contain more wall tile actors.
so_handle Stage_GetFirstWallTileActor(int cell_x,int cell_y);

// Returns the first wall tile actor in given cell but no cables. Returns 0 if no actor is found. Note that the cell may contain more wall tile actors.
so_handle Stage_GetFirstWallTileActorButNoCables(int cell_x,int cell_y);

// Returns the first stage object with given id.
so_handle Stage_GetFirstStageObjectWithId(string id);

// Pastes given stage file to given x,y coordinate with given angle.
void Stage_PasteExternalStageToStage(string stage_file_name,float x,float y,float angle_degrees);

// Pastes given stage file to given x,y coordinate with given angle. The pasted stage is rotated around given x,y point.
void Stage_PasteExternalStageToStageRotateAroundUpperLeftCorner(string stage_file_name,float x,float y,float angle_degrees);

// Sets stage script. Scripts are located at scripts/stage-scripts folder.
void Stage_SetStageScript(string script);

// Sets stage music track from file in music/ folder.
void Stage_SetMusicTrack(string sound_file);

// Creates actor of given type (filename) to given xyz position.
so_handle Stage_CreateActor(string actor_type,float x,float y,float z);

// 
so_handle Stage_CreateScriptableSurface(string script,float x,float y,float z);

// Creates marker with given id to given xyz coordinate.
so_handle Stage_CreateMarker(string id,float x,float y,float z);

// Creates new sound source to given position with default parameters (looping=true, radius=256).
so_handle Stage_CreateSoundSource(string sound_file,float x,float y,float z);

// Creates light of given type at given position. Light type can be one of the LIGHT_TYPE_* constants such as LIGHT_TYPE_POINT.
so_handle Stage_CreateLight(LIGHT_TYPE_* type,float x,float y,float z);

// Creates decal from bitmap to given xy position on ground with given angle (in degrees) and scale.
so_handle Stage_CreateDecalOnGround(string decal_bitmap_filename,float x,float y,float angle_in_degrees,float scale);

// Creates decal with given text to given xy position on ground with given angle (in degrees) and scale.
so_handle Stage_CreateTextDecalOnGround(string font_name, string text, float x,float y,float angle_in_degrees,float scale);

// Creates particle emitter from given effect to xyz position emitting with given intervals.
so_handle Stage_CreateParticleEmitter(string effect_filename,float x,float y,float z,float emit_interval_seconds);

// Deletes stage object with given handle.
void Stage_DeleteStageObject(so_handle handle);

// Returns an array of all stage objects having root position inside given rectangle.
array[so_handle,...] Stage_QueryStageObjectsInsideRectangle(float center_x,float center_y,float width,float height);

// Returns an array of all stage objects having root position with distance from given xy position less or equal than given radius.
array[so_handle,...] Stage_QueryStageObjectsInRadius(float center_x,float center_y,float radius);

// Returns true if stage editor is open.
boolean Stage_IsStageEditorOpen();

// Sets ambient light r g b value.
void Stage_SetAmbientLight(float r,float g,float b);

// Returns value associated with string key or null.
void Stage_GetKeyValue(string key);

// Sets stage key value. If key-value was already set to a different type, value is not changed.
void Stage_SetKeyValue(string key,<float/integer/boolean/string> value);

// Sends command to stage object. Stage object type will process the command and react accordingly.
void Stage_SendStageObjectCommand(so_handle,string command,string parm);

// Sends command to actor object. Actor AI will process the command and react accordingly.
void Stage_SendActorCommand(so_handle,string command,float parm);

// Spawns an effect to given stage coordinates. Uses the stage main particle system.
void Stage_SpawnEffect(string effect,float x,float y,float z,float angle);

// Returns true if line of sight from-to position is clear. Ignores all non-static actors.
boolean Stage_IsLineOfSightClear(float from_x,float from_y,float from_z,float to_x,float to_y,float to_z);

// Returns true if line from-to 2D position is walkable by walker with given radius. Walks on z-plane and ignores all non-static actors.
boolean Stage_IsLineWalkable(float from_x,float from_y,float to_x,float to_y,float walker_radius);

// Returns collision position of the ray cast from-to position or null if ray doesn't collide into anything.
array[x,y,z] Stage_RayCast(float from_x,float from_y,float from_z,float to_x,float to_y,float to_z);

// Sets light radius.
void Light_SetRadius(so_handle light_handle,float radius);

// Sets light rgb color.
void Light_SetColor(so_handle light_handle,float r,float g,float b);

// Sets whether light casts shadows or not.
void Light_SetShadows(so_handle light_handle,boolean shadows);

// Sets whether light draws a hilight or not.
void Light_SetHilight(so_handle light_handle,boolean hilight);

// Returns type of the given stage object.
STAGE_OBJECT_TYPE_* StageObject_GetType(so_handle handle);

// Sets stage object id
void StageObject_SetId(so_handle handle,string new_id);

// Sets stage object parent. Transforms (position, rotation, scale) remain unaffected.
void StageObject_SetParent(so_handle handle,so_handle new_parent_handle);

// Returns parent object handle or null if object has no parent.
so_handle StageObject_GetParent(so_handle handle);

// Returns number of children the stage object has.
integer StageObject_GetNumberOfChildren(so_handle handle);

// Returns child stage object handle by child index or null if index is out of bounds.
so_handle StageObject_GetChildByIndex(so_handle so_handle, integer index);

// Sets stage object scale.
void StageObject_SetScale(so_handle handle,float scale);

// Gets stage object scale.
void StageObject_GetScale(so_handle handle);

// Sets stage object angle around z axis.
void StageObject_SetAngle(so_handle handle,float angle_degrees);

// Sets stage object angle around x, y, and axis in degrees.
void StageObject_SetAngles(so_handle handle,float angle_x,float angle_y,float angle_z);

// Returns the angle of the stage object om degrees.
float StageObject_GetAngle(so_handle handle);

// Returns the stage object xyz position as array with 3 floats.
array[x,y,z] StageObject_GetPosition(so_handle);

// Sets stage object xyz position.
void StageObject_SetPosition(so_handle handle,float x,float y,float z);

// Sets stage object xy position. Z position is determined as the highest top down collision point at x y coordinate. This can be used to place objects on a table for example.
void StageObject_SetPositionByStackingOnTop(so_handle handle,float x,float y);

// Returns the stage object stage xyz position as array with 3 floats.
array[x,y,z] StageObject_GetStagePosition(so_handle);

// Returns stage object with given id or 0 if no object has the id.
so_handle StageObject_GetById(string id);

// Returns value associated with string key or null.
void StageObject_GetKeyValue(so_handle handle,string key);

// Sets stage object key value. If key-value was already set to a different type, value is not changed.
void StageObject_SetKeyValue(so_handle handle,string key,<float/integer/boolean/string> value);

// Sets stage object key value float. If key-value was already set to a different type, value is not changed.
void StageObject_SetKeyValueFloat(so_handle handle,string key,float value);

// Sets stage object key value integer. If key-value was already set to a different type, value is not changed.
void StageObject_SetKeyValueInteger(so_handle handle,string key,integer value);

// Sets stage object key value boolean. If key-value was already set to a different type, value is not changed.
void StageObject_SetKeyValueBoolean(so_handle handle,string key,boolean value);

// Sets stage object key value string. If key-value was already set to a different type, value is not changed.
void StageObject_SetKeyValueString(so_handle handle,string key,string value);

// Sets stage object key value stage object reference. If key-value was already set to a different type, value is not changed.
void StageObject_SetKeyValueStageObjectReference(so_handle handle,string key,so_handle value);

// Sets stage object key value bitmap. If key-value was already set to a different type, value is not changed.
void StageObject_SetKeyValueBitmap(so_handle handle,string key,string bitmap_name);

// Returns true if line of sight from stage object to xyz position is clear.
boolean StageObject_IsLineOfSightClear(so_handle handle,float x,float y,float z);

// Sets scriptable surface key value.
void ScriptableSurface_SetKeyValue(string key,string value);

// Sets marker radius.
void Marker_SetRadius(so_handle handle,float radius);

// Sets sound source sound file. The old sound is stopped with fading and new sound will start immediately if the listener is in radius.
void SoundSource_SetSound(so_handle handle,string sound_file);

// Sets sound source radius.
void SoundSource_SetRadius(so_handle handle,float radius);

// Sets sound source looping on/off.
void SoundSource_SetLooping(so_handle handle,boolean looping);

// Sets sound source to ambient.
void SoundSource_SetToAmbient(so_handle handle);

// Sets sound source to positional.
void SoundSource_SetToPositional(so_handle handle);

// Sets trigger on enter radius on/off.
void SoundSource_SetTriggerOnEnterRadius(so_handle handle,boolean trigger_on_enter);

// Sets trigger on leave radius on/off.
void SoundSource_SetTriggerOnLeaveRadius(so_handle handle,boolean trigger_on_leave);

// Returns actor type of the given actor.
string Actor_GetActorType(so_handle actor);

// Sets the actor target angle defined in degrees. Target angle usually defines the torso angle.
void Actor_SetTargetAngle(so_handle actor,float angle_degrees);

// Returns actor target (angle in degrees) or nil if actor handle is not valid.
float Actor_GetTargetAngle(so_handle actor);

// Kills actor and starts the death animation.
void Actor_KillActorAndStartDeathAnimation(so_handle actor);

// Kills actor and sets the state to the end of death animation.
void Actor_KillActorAndSetDeadInstantly(so_handle actor);

// Returns actor hit points.
void Actor_GetHitPoints(so_handle actor);

// Returns actor hit points maximum.
void Actor_GetHitPointsMaximum(so_handle actor);

// Sets decal color to given rgba value.
void Decal_SetColor(so_handle decal,float r,float g,float b, float a);

// Returns the total number of actor types.
integer ActorType_GetNumberOfActorTypes();

// Returns actor type in given index or nil if index out of bounds.
string ActorType_GetActorTypeIdByIndex(integer index);

// Returns actor type circle radius (xy plane bounding circle).
float ActorType_GetBoundingCircleRadius(string actor_type);

// Returns actor type bounding box dimensions as array.
array[x,y,z] ActorType_GetBoundingBoxDimensions(string actor_type);

// Returns actor type bounding box center offset as array.
array[x,y,z] ActorType_GetBoundingBoxCenterOffset(string actor_type);

// Returns true if actor type belongs to tileset category.
boolean ActorType_BelongsToTilesetCategory(string actor_type, string tileset_category);

// Play the given stage after loading.
void Misc_LoadAndPlayStage(string stage_filename);

// Quickly restarts stage from the top of stage stack.
void Misc_QuickStageRestart();

// Sets engine key value of boolean type.
void Engine_SetKeyValueBoolean(string key,boolean value);

// Deal damage to actor.
void Game_NC_Actor_DealDamage(so_handle handle,float damage);

// Sends hack with one float to actor.
void Game_NC_Actor_SendHack(so_handle handle,float number);

// localized string
void Game_NC_LocalizeMapped(string id);

// Get dps for weapon
float value Game_NC_GetDPSForWeaponWithName(string value);

// Sets fog r g b value.
void Game_NC_SetFogColor(float r,float g,float b);

// Returns true if any player in radius
bool value Game_NC_IsAnyPlayerInRadius(float x, float y, float radius, string id);

// Show <message> for <time> seconds.
void Game_NC_ShowNotification(string message, float time);

// Installs given enhancement to given actor.
void Game_NC_InstallEnhancement(so_handle actor, string enhancement_id);

// Uninstalls given enhancement from given actor if it has it.
void Game_NC_UninstallEnhancement(so_handle actor, string enhancement_id);

// Updates progress bar and makes it visible.
void Game_NC_UpdateProgessBar(float width, float value, string title, string subtitle);

// Returns true if feature exists.
bool value Game_NC_DoesFeatureExist(string feature);

// Returns a game setting value.
int value Game_NC_GetGameSettingInt(string setting, int default_value);

// Returns true if full version is unlocked.
bool value Game_NC_IsFullVersionUnlocked();

